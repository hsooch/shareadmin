<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="semesterMapper">

    <select id="getSemesterList" parameterType="map" resultType="semesterVO">
    	/* semesterMapper.getSemesterList */
    	<include refid="shared.university.admin.mapper.common.commonMapper.selectPagingTop" />
    	SELECT 
 			A.UNIV_CODE
 			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) AS UNIV_CODE_NAME
			, A.YEAR AS	YEAR
			, A.SEMESTER_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.SEMESTER_CODE) AS SEMESTER_CODE_NAME
			, A.SEMESTER_START_DAY
			, A.SEMESTER_END_DAY
			, A.DISPLAY_YN
			, A.REG_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_NAME
			, CONVERT(VARCHAR, A.REG_DT, 102) AS REG_DT
			, A.MOD_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.MOD_USER_SEQ) AS MOD_USER_NAME
			, CONVERT(VARCHAR, A.MOD_DT, 102) AS MOD_DT
		FROM TBL_SEMESTER A
		WHERE 1=1
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchUnivArea) and @org.apache.commons.lang3.StringUtils@isEmpty(searchUniv)">
        	AND A.UNIV_CODE IN (SELECT CODE FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND PARENT_CODE = #{searchUnivArea} )
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchUniv)">
        	AND A.UNIV_CODE = #{searchUniv}
        </if>
		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchYear)">
        	AND A.YEAR = #{searchYear}
        </if>
		<include refid="shared.university.admin.mapper.common.commonMapper.selectPagingBottom" />
    </select>
    
    <update id="upsertSemesterInfo" parameterType="map">
    	/* semesterMapper.upsertSemesterInfo */
		<choose>
			<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(exposedUnivCode)">
				UPDATE TBL_SEMESTER
		    	SET
		    		  MOD_USER_SEQ = #{modUserSeq}
		   			, MOD_DT = GETDATE()
		   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(displayYn)">
		   			, DISPLAY_YN = #{displayYn}
		   			</if>
				WHERE
	    			UNIV_CODE = #{exposedUnivCode}
	    	</when>
	    	<otherwise>
    			DECLARE @SEMESTER_CODE VARCHAR(11), @YEAR VARCHAR(4), @UNIV_CODE VARCHAR(11)
	    		<choose>
		    		<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(univCode)">
		    			SET @SEMESTER_CODE = #{semesterCode}
		    			SET @YEAR = #{year}
		    			SET @UNIV_CODE = #{univCode}
		    		</when>
		    		<otherwise>
		    			SET @SEMESTER_CODE = #{newSemesterCode}
		    			SET @YEAR = #{newYear}
		    			SET @UNIV_CODE = #{newUnivCode}
		   			</otherwise>
		    	</choose>
	    		IF NOT EXISTS (SELECT 1 FROM TBL_SEMESTER WHERE SEMESTER_CODE = @SEMESTER_CODE AND YEAR = @YEAR AND UNIV_CODE = @UNIV_CODE)
		    		INSERT INTO TBL_SEMESTER(
	    			  REG_DT
	    			, REG_USER_SEQ
	    			, UNIV_CODE
	    			, YEAR
	    			, SEMESTER_CODE
	    			, SEMESTER_START_DAY
	    			, SEMESTER_END_DAY
	    			, DISPLAY_YN
	    		)
	    		VALUES(
	    			  GETDATE()
	    			, #{modUserSeq}
	    			, @UNIV_CODE
	    			, @YEAR
	    			, @SEMESTER_CODE
	    			, #{semesterStartDay}
	    			, #{semesterEndDay}
	    			, #{displayYn}
	    			
	    		)
		    	ELSE
		    	UPDATE TBL_SEMESTER
		    	SET
		    		  MOD_USER_SEQ = #{modUserSeq}
		   			, MOD_DT = GETDATE()
		   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(newUnivCode)">
		    		, UNIV_CODE = #{newUnivCode}
		    		</if>
		    		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(newYear)">
		   			, YEAR = #{newYear}
		   			</if>
		   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(newSemesterCode)">
		  			, SEMESTER_CODE	= #{newSemesterCode}
		  			</if>
		  			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(semesterStartDay)">
		   			, SEMESTER_START_DAY = #{semesterStartDay}
		   			</if>
		   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(semesterEndDay)">
		   			, SEMESTER_END_DAY	= #{semesterEndDay}
		   			</if>
		   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(displayYn)">
		   			, DISPLAY_YN = #{displayYn}
		   			</if>
				WHERE
    				SEMESTER_CODE = @SEMESTER_CODE
    				AND YEAR = @YEAR
    				AND UNIV_CODE = @UNIV_CODE
	    	</otherwise>
    	</choose>
    </update>
    
    <select id="getSemesterInfo" parameterType="map" resultType="semesterVO">
    	/* semesterMapper.getSemesterInfo */
    	SELECT
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchType)">
				<if test='searchType == "exposed"'>
				TOP 1
				</if>
			</if> 
 			(SELECT PARENT_CODE FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) + '|' + A.UNIV_CODE AS UNIV_CODE
 			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) AS UNIV_CODE_NAME
			, A.YEAR AS	YEAR
			, A.SEMESTER_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.SEMESTER_CODE) AS SEMESTER_CODE_NAME
			, A.SEMESTER_START_DAY
			, A.SEMESTER_END_DAY
			, A.DISPLAY_YN
			, A.REG_USER_SEQ
			, (SELECT USER_ID FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_NAME
			, A.REG_DT
			, A.MOD_USER_SEQ
			, (SELECT USER_ID FROM TBL_USER WHERE USER_SEQ = A.MOD_USER_SEQ) AS MOD_USER_NAME
			, A.MOD_DT
			, (SELECT COUNT(1) FROM TBL_SEMESTER_SUBJECT SS WHERE A.SEMESTER_CODE = SS.SEMESTER_CODE
       				AND A.YEAR = SS.YEAR
       				AND A.UNIV_CODE = SS.UNIV_CODE) AS SUBJECT_CNT
		FROM TBL_SEMESTER A
		WHERE 
		<choose>
			<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchType)">
				<choose>
					<when test='searchType == "exposed"'>
					A.DISPLAY_YN = 'Y'
					AND A.UNIV_CODE = #{newUnivCode}
					</when>
					<otherwise>
					A.SEMESTER_CODE = #{semesterCode}
       				AND A.YEAR = #{year}
       				AND A.UNIV_CODE = #{univCode}
					</otherwise>
				</choose>
			</when>
			<otherwise>
				<choose>
					<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(newSemesterCode) and 
								@org.apache.commons.lang3.StringUtils@isNotEmpty(newYear) and
								@org.apache.commons.lang3.StringUtils@isNotEmpty(newUnivCode)">
						A.SEMESTER_CODE = #{newSemesterCode}
		       			AND A.YEAR = #{newYear}
		       			AND A.UNIV_CODE = #{newUnivCode}
						<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(semesterCode) and 
								  @org.apache.commons.lang3.StringUtils@isNotEmpty(year) and
								  @org.apache.commons.lang3.StringUtils@isNotEmpty(univCode)">
							<if test="newSemesterCode == semesterCode and newYear == year and newUnivCode == univCode">
							 	AND A.SEMESTER_CODE != #{semesterCode}
		       					AND A.YEAR != #{year}
								AND A.UNIV_CODE != #{univCode}
							</if>
						</if>
					</when>
					<otherwise>
						A.SEMESTER_CODE IS NOT NULL
						AND A.YEAR IS NOT NULL
						AND A.UNIV_CODE IS NOT NULL
					</otherwise>
				</choose>
			</otherwise>
		</choose>
    </select>
    
    <delete id="deleteSemesterInfo" parameterType="map">
    	/* semesterMapper.deleteSemesterInfo */
    	DELETE FROM TBL_SEMESTER
    	WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    </delete>
    
    <select id="getSemesterListWithGuide" parameterType="map" resultType="umap">
    	/* semesterMapper.getSemesterListWithGuide */
    	<include refid="shared.university.admin.mapper.common.commonMapper.selectPagingTop" />
		<if test='isGroupBySemester == "Y"'>
			SELECT GR.YEAR, GR.SEMESTER_CODE, GR.SEMESTER_CODE_NAME
			FROM (
		</if>
		SELECT
			<!-- 학기 정보 -->
			A.
			UNIV_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) AS UNIV_CODE_NAME
			, A.YEAR AS YEAR
			, A.SEMESTER_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.SEMESTER_CODE)
			AS SEMESTER_CODE_NAME
			, A.SEMESTER_START_DAY
			, A.SEMESTER_END_DAY
			, A.DISPLAY_YN
			, A.REG_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_NAME
			, CONVERT(VARCHAR, A.REG_DT, 102) AS REG_DT
			, A.MOD_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.MOD_USER_SEQ) AS MOD_USER_NAME
			, CONVERT(VARCHAR, A.MOD_DT, 102) AS MOD_DT
			<!-- 접수기간/안내문 정보 -->
			, B.UNIV_CODE AS GUIDE_UNIV_CODE
			, B.YEAR AS GUIDE_YEAR
			, B.SEMESTER_CODE AS GUIDE_SEMESTER_CODE
			, B.RECEIPT_START_DAY
			, B.RECEIPT_END_DAY
			, B.DISPLAY_YN AS GUIDE_DISPLAY_YN
			, CASE
			WHEN CONVERT(VARCHAR, GETDATE(), 112) BETWEEN B.RECEIPT_START_DAY AND B.RECEIPT_END_DAY THEN '접수중'
			WHEN <![CDATA[CONVERT(VARCHAR, GETDATE(), 112) < B.RECEIPT_START_DAY]]> THEN '대기'
			WHEN <![CDATA[CONVERT(VARCHAR, GETDATE(), 112) > B.RECEIPT_END_DAY]]> THEN '마감'
			ELSE ''
			END AS GUIDE_STATUS
			, B.REG_USER_SEQ AS GUIDE_REG_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = B.REG_USER_SEQ) AS GUIDE_REG_USER_NAME
			, CONVERT(VARCHAR, B.REG_DT, 102) AS GUIDE_REG_DT
			, B.MOD_USER_SEQ AS GUIDE_MOD_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = B.MOD_USER_SEQ) AS GUIDE_MOD_USER_NAME
			, CONVERT(VARCHAR, B.MOD_DT, 102) AS GUIDE_MOD_DT
			, B.CONTENTS
			, B.ACCEPT_GUIDE_MAIL_TITLE
			, B.ACCEPT_GUIDE_MAIL_CONTENTS
		FROM TBL_SEMESTER A
		LEFT JOIN TBL_SEMESTER_GUIDE_DOC B
			ON (A.UNIV_CODE = B.UNIV_CODE AND A.YEAR = B.YEAR AND A.SEMESTER_CODE = B.SEMESTER_CODE)
		WHERE A.DISPLAY_YN = 'Y'
		<!-- AND B.SEMESTER_SEQ IS NOT NULL -->
		<if test='isRequiredDoc == "Y"'>
			AND B.SEMESTER_CODE IS NOT NULL
		</if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchUnivArea) and @org.apache.commons.lang3.StringUtils@isEmpty(searchUniv)">
			AND A.UNIV_CODE IN (SELECT CODE FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND PARENT_CODE
			= #{searchUnivArea} )
		</if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchUniv)">
        	AND A.UNIV_CODE = #{searchUniv}
        </if>
		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchYear)">
        	AND A.YEAR = #{searchYear}
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchSemesterCode)">
        	AND A.SEMESTER_CODE = #{searchSemesterCode}
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchDisplayYn)">
        	AND B.DISPLAY_YN = #{searchDisplayYn}
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(searchSemesterStatus)">
        	<choose>
        		<when test='searchSemesterStatus == "accepting"'>
        			AND CONVERT(VARCHAR, GETDATE(), 112) BETWEEN B.RECEIPT_START_DAY AND B.RECEIPT_END_DAY
        		</when>
        		<when test='searchSemesterStatus == "wait"'>
        			<![CDATA[AND CONVERT(VARCHAR, GETDATE(), 112) < B.RECEIPT_START_DAY]]>
        		</when>
        		<when test='searchSemesterStatus == "close"'>
        			<![CDATA[AND CONVERT(VARCHAR, GETDATE(), 112) > B.RECEIPT_END_DAY]]>
        		</when>
        	</choose>
        </if>
		<if test='isGroupBySemester == "Y"'>
			) GR
			GROUP BY GR.YEAR, GR.SEMESTER_CODE, GR.SEMESTER_CODE_NAME
			ORDER BY GR.YEAR DESC, GR.SEMESTER_CODE_NAME DESC
		</if>
		<include refid="shared.university.admin.mapper.common.commonMapper.selectPagingBottom" />
    </select>
    
    <select id="getGuideInfo" parameterType="map" resultType="umap">
    	/* semesterMapper.getGuideInfo */
    	SELECT 
	    	<!-- 학기 정보 -->
 			  A.UNIV_CODE
 			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) AS UNIV_CODE_NAME
			, A.YEAR AS	YEAR
			, A.SEMESTER_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.SEMESTER_CODE) AS SEMESTER_CODE_NAME
			, A.SEMESTER_START_DAY
			, A.SEMESTER_END_DAY
			, A.DISPLAY_YN
			, A.REG_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_NAME
			, CONVERT(VARCHAR, A.REG_DT, 102) AS REG_DT
			, A.MOD_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.MOD_USER_SEQ) AS MOD_USER_NAME
			, CONVERT(VARCHAR, A.MOD_DT, 102) AS MOD_DT
			<!-- 접수기간/안내문 정보 -->
			, B.UNIV_CODE AS GUIDE_UNIV_CODE
			, B.YEAR AS GUIDE_YEAR
			, B.SEMESTER_CODE AS GUIDE_SEMESTER_CODE
			, B.RECEIPT_START_DAY
			, B.RECEIPT_END_DAY
			, B.DISPLAY_YN AS GUIDE_DISPLAY_YN
			, B.REG_USER_SEQ AS GUIDE_REG_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = B.REG_USER_SEQ) AS GUIDE_REG_USER_NAME
			, CONVERT(VARCHAR, B.REG_DT, 102) AS GUIDE_REG_DT
			, B.MOD_USER_SEQ AS GUIDE_MOD_USER_SEQ
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = B.MOD_USER_SEQ) AS GUIDE_MOD_USER_NAME
			, CONVERT(VARCHAR, B.MOD_DT, 102) AS GUIDE_MOD_DT
			, B.CONTENTS
			, B.ACCEPT_GUIDE_MAIL_TITLE
			, B.ACCEPT_GUIDE_MAIL_CONTENTS
		FROM TBL_SEMESTER A
		LEFT JOIN TBL_SEMESTER_GUIDE_DOC B ON A.UNIV_CODE = B.UNIV_CODE AND A.YEAR = B.YEAR AND A.SEMESTER_CODE = B.SEMESTER_CODE
		WHERE A.DISPLAY_YN = 'Y'
		AND A.SEMESTER_CODE = #{semesterCode}
		AND A.YEAR = #{year}
       	AND A.UNIV_CODE = #{univCode}
    </select>
    
    <select id="getGudieFileKeyList" parameterType="map" resultType="umap">
    	/* semesterMapper.getGudieFileKeyList */
    	SELECT 
    		  SEMESTER_CODE
    		, YEAR
    		, UNIV_CODE
    		, FILE_KEY
    		, DOC_TYPE
    	FROM TBL_SEMESTER_GUIDE_FILE
    	WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    	AND DOC_TYPE = #{docType}
    </select>
    
    <update id="upsertGuideInfo" parameterType="map">
    	/* semesterMapper.upsertGuideInfo */
    	DECLARE @SEMESTER_CODE VARCHAR(11), @YEAR VARCHAR(4), @UNIV_CODE VARCHAR(11)
    	SET @SEMESTER_CODE = #{semesterCode}
    	SET @YEAR = #{year}
    	SET @UNIV_CODE = #{univCode}

    	IF NOT EXISTS (SELECT 1 FROM TBL_SEMESTER_GUIDE_DOC WHERE SEMESTER_CODE = @SEMESTER_CODE AND YEAR = @YEAR AND UNIV_CODE = @UNIV_CODE)
    		INSERT INTO TBL_SEMESTER_GUIDE_DOC(
	    		  SEMESTER_CODE
	    		, YEAR
	    		, UNIV_CODE
				, RECEIPT_START_DAY
				, RECEIPT_END_DAY
				, DISPLAY_YN
				, REG_USER_SEQ
				, REG_DT
				, CONTENTS
				, ACCEPT_GUIDE_MAIL_TITLE
				, ACCEPT_GUIDE_MAIL_CONTENTS
    		)
    		VALUES(
    			  @SEMESTER_CODE
	    		, @YEAR
	    		, @UNIV_CODE
				, #{receiptStartDay}
				, #{receiptEndDay}
				, #{gudieDisplayYn}
				, #{modUserSeq}
				, GETDATE()
				, #{contents}
				, null
				, null
    		)
    	ELSE
	    	UPDATE TBL_SEMESTER_GUIDE_DOC
	    	SET
	    		  MOD_USER_SEQ = #{modUserSeq}
	   			, MOD_DT = GETDATE()
	   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(receiptStartDay)">
	   			, RECEIPT_START_DAY = #{receiptStartDay}
	   			</if>
	   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(receiptEndDay)">
	   			, RECEIPT_END_DAY	= #{receiptEndDay}
	   			</if>
	   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(guideDisplayYn)">
	   			, DISPLAY_YN = #{guideDisplayYn}
	   			</if>
	   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(contents)">
	    		, CONTENTS = #{contents}
	    		</if>
	    		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(acceptGuideMailTitle)">
	   			, ACCEPT_GUIDE_MAIL_TITLE = #{acceptGuideMailTitle}
	   			</if>
	   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(acceptGuideMailContents)">
	  			, ACCEPT_GUIDE_MAIL_CONTENTS	= #{acceptGuideMailContents}
	  			</if>
			WHERE SEMESTER_CODE = @SEMESTER_CODE
			AND YEAR = @YEAR
			AND UNIV_CODE = @UNIV_CODE;
    		
    	<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(guideFileKey)">
   		IF NOT EXISTS (SELECT 1 FROM TBL_SEMESTER_GUIDE_FILE WHERE SEMESTER_CODE = @SEMESTER_CODE AND YEAR = @YEAR AND UNIV_CODE = @UNIV_CODE AND FILE_KEY = #{guideFileKey} )
   			INSERT INTO TBL_SEMESTER_GUIDE_FILE(
   				  SEMESTER_CODE
				, YEAR
				, UNIV_CODE
   				, FILE_KEY
   				, DOC_TYPE
   			)
   			VALUES(
   				  @SEMESTER_CODE
				, @YEAR
				, @UNIV_CODE
   				, #{guideFileKey}
   				, ISNULL(#{docType}, 1)
   			)
    	</if>
    </update>
    
    <select id="getGuideFileInfo" parameterType="map" resultType="umap">
		/* semesterMapper.getGuideFileInfo */
		SELECT 
			  SEMESTER_CODE
			, YEAR
			, UNIV_CODE
			, FILE_KEY AS GUIDE_FILE_KEY
			, DOC_TYPE
		FROM TBL_SEMESTER_GUIDE_FILE
		WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    	AND DOC_TYPE = #{docType}
    </select>
    
    <delete id="deleteGuideInfo" parameterType="map">
    	/* semesterMapper.deleteGuideInfo */
    	DELETE FROM TBL_SEMESTER_GUIDE_DOC
    	WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    </delete>
    
    <delete id="deleteGuideFile" parameterType="map">
    	/* semesterMapper.deleteGuideFile */
    	DELETE FROM TBL_SEMESTER_GUIDE_FILE
    	WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    	AND DOC_TYPE = #{docType}
    	<if test="removeFileKeys != null">
	    	<foreach item="fileKey" collection="removeFileKeys" open="AND FILE_KEY IN (" close=")" separator=",">
	    		#{fileKey}
	    	</foreach>
    	</if>
    </delete>
    
    <select id="getAcceptGuideInfo" parameterType="map" resultType="umap">
    	/* semesterMapper.getAcceptGuideInfo */
    	SELECT DISTINCT
 			  A.UNIV_CODE
 			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.UNIV_CODE) AS UNIV_CODE_NAME
			, A.YEAR AS	YEAR
			, A.SEMESTER_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE USE_YN = 'Y' AND DEL_YN = 'N' AND CODE = A.SEMESTER_CODE) AS SEMESTER_CODE_NAME
			, A.ACCEPT_GUIDE_MAIL_TITLE
			, A.ACCEPT_GUIDE_MAIL_CONTENTS
			, A.ACCEPT_GUIDE_REG_USER_SEQ
			, A.ACCEPT_GUIDE_REG_DT
			, A.ACCEPT_GUIDE_MOD_USER_SEQ
			, A.ACCEPT_GUIDE_MOD_DT
		 FROM
		 	TBL_SEMESTER_GUIDE_DOC A
		WHERE
			A.YEAR = #{year}
		  AND 
		  	A.UNIV_CODE = #{univCode}
		  AND
		  	A.SEMESTER_CODE = #{semesterCode}
    </select>
    
    <update id="updateAcceptGuideInfo" parameterType="map">
    	/* semesterMapper.updateAcceptGuideInfo */
    	DECLARE @SEMESTER_CODE VARCHAR(11), @YEAR VARCHAR(4), @UNIV_CODE VARCHAR(11)
    	SET @SEMESTER_CODE = #{semesterCode}
    	SET @YEAR = #{year}
    	SET @UNIV_CODE = #{univCode}

		IF NOT EXISTS (SELECT 1 FROM TBL_SEMESTER_GUIDE_DOC WHERE SEMESTER_CODE = @SEMESTER_CODE AND YEAR = @YEAR AND UNIV_CODE = @UNIV_CODE)
    		INSERT INTO TBL_SEMESTER_GUIDE_DOC(
	    		  SEMESTER_CODE
	    		, YEAR
	    		, UNIV_CODE
				, ACCEPT_GUIDE_REG_USER_SEQ
   				, ACCEPT_GUIDE_REG_DT
				, ACCEPT_GUIDE_MAIL_TITLE
				, ACCEPT_GUIDE_MAIL_CONTENTS
    		)
    		VALUES(
    			  @SEMESTER_CODE
	    		, @YEAR
	    		, @UNIV_CODE
				, #{modUserSeq}
				, GETDATE()
				, #{acceptGuideMailTitle}
				, #{acceptGuideMailContents}
    		)
    	ELSE
    	UPDATE TBL_SEMESTER_GUIDE_DOC
    	SET
    		  MOD_USER_SEQ = #{modUserSeq}
   			, MOD_DT = GETDATE()
   			, ACCEPT_GUIDE_REG_USER_SEQ	= #{modUserSeq}
   			, ACCEPT_GUIDE_REG_DT	= GETDATE()
   			, ACCEPT_GUIDE_MOD_USER_SEQ	= #{modUserSeq}
   			, ACCEPT_GUIDE_MOD_DT	= GETDATE()
    		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(acceptGuideMailTitle)">
   			, ACCEPT_GUIDE_MAIL_TITLE = #{acceptGuideMailTitle}
   			</if>
   			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(acceptGuideMailContents)">
  			, ACCEPT_GUIDE_MAIL_CONTENTS	= #{acceptGuideMailContents}
  			</if>
		WHERE SEMESTER_CODE = @SEMESTER_CODE
		AND YEAR = @YEAR
		AND UNIV_CODE = @UNIV_CODE;
    		
    	<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(guideFileKey)">
   		IF NOT EXISTS (SELECT 1 FROM TBL_SEMESTER_GUIDE_FILE WHERE SEMESTER_CODE = @SEMESTER_CODE AND YEAR = @YEAR AND UNIV_CODE = @UNIV_CODE AND FILE_KEY = #{guideFileKey} AND DOC_TYPE = 2)
   			INSERT INTO TBL_SEMESTER_GUIDE_FILE(
   				  SEMESTER_CODE
				, YEAR
				, UNIV_CODE
   				, FILE_KEY
   				, DOC_TYPE
   			)
   			VALUES(
   				  @SEMESTER_CODE
				, @YEAR
				, @UNIV_CODE
   				, #{guideFileKey}
   				, 2
   			)
    	</if>
    </update>
        
    <delete id="deleteAcceptGuideInfo" parameterType="map">
    	/* semesterMapper.deleteAcceptGuideInfo */
    	DELETE FROM TBL_SEMESTER_GUIDE_DOC
    	WHERE SEMESTER_CODE = #{semesterCode}
    	AND YEAR = #{year}
    	AND UNIV_CODE = #{univCode}
    	AND DOC_TYPE = 2
    </delete>
    
    <insert id="sendAcceptGuide" parameterType="map">
    	/* semesterMapper.sendAcceptGuide */
    	
    	<!-- 문자메시지 부달 발송 있는 알림톡(알림톡 차단했을 경우 문자로 전송) -->
<!-- 			INSERT INTO  -->
<!-- 				tms.dbo.TMS_QUEUE ( SITE_ID, LINK_ID, CHANNEL_TYPE, MSG_CODE, TO_NAME, -->
<!-- 									TO_PHONE, SENDER_KEY, TEMPLATE_CODE, SWITCH_YN, TARGET_YN, -->
<!-- 									REQ_DATE, REG_DATE,  -->
<!-- 									MAP1, MAP2, MAP3, MAP4, MAP5  -->
<!-- 								  ) -->
<!-- 						VALUES	  ( 1, '연동ID', 'KA', 'K0001', '김김김', -->
<!-- 									'01099999999', '289ec651a6f90359068ed3a9c0a03dd0e607b0a4', 'B_GU_09_02_05385', 'N', 'N', -->
<!-- 									'2018-06-22 14:58:00.000', GETDATE(), -->
<!-- 									'♥♥♥대학교', '♥♥♥개론', '2018년 ♥월 ♥일', '♥요일 오후♥시', '♥♥♥관 ♥♥♥호' -->
<!-- 								  ) -->
    	
    	<!-- LMS 전송 -->
    	INSERT INTO
    		tms.dbo.TMS_QUEUE
	    		(
	    			  SITE_ID
	    			, LINK_ID
	    			, CHANNEL_TYPE, MSG_CODE
	    			, TO_NAME
	    			, TO_PHONE
	    			, FROM_PHONE
	    			, TITLE
	    			, CONTENT
	    			, TARGET_YN, REQ_DATE, REG_DATE
	    		)
			VALUES
				(
					  1
					, #{mInStNum}
					, 'LM', 'S0001'
					, #{userName}
					, #{cellNo}
					, '01023457890'
					, '학점교류 승인 안내 메시지'
					, #{content}
					, 'N', GETDATE(), GETDATE()
				)
				
    	<!-- SMS 전송 -->
<!--     	INSERT INTO -->
<!-- 	    	tms.dbo.TMS_QUEUE -->
<!-- 	    		(	  SITE_ID -->
<!-- 	    			, LINK_ID -->
<!-- 	    			, CHANNEL_TYPE, MSG_CODE -->
<!-- 	    			, TO_NAME -->
<!-- 	    			, TO_PHONE -->
<!-- 	    			, FROM_PHONE -->
<!-- 	    			, CONTENT -->
<!-- 	    			, TARGET_YN, REQ_DATE, REG_DATE) -->
<!-- 			VALUES -->
<!-- 				(	  1 -->
<!-- 					, #{mInStNum} -->
<!-- 					, 'SM', 'S0001' -->
<!-- 					, #{userName} -->
<!-- 					, #{cellNo} -->
<!-- 					, '01023457890' -->
<!-- 					, #{content} -->
<!-- 					, 'N', GETDATE(), GETDATE() -->
<!-- 				) -->
			<selectKey resultType="int" keyProperty="seq" order="AFTER">
				SELECT IDENT_CURRENT('tms.dbo.TMS_QUEUE')
 			</selectKey>
    </insert>
    
    <insert id="saveMsgInfo" parameterType="map">
    	INSERT INTO TBL_MESSAGE
    		(
    			  MSG_TYPE
    			, TITLE
    			, CONTENTS
    			, REG_USER_SEQ
    			, REG_DT
    			, SELECT_YN
    			, SEND_YN
    			, IMAGE_SIZE
    			, IMAGE_FILE_KEY
    		)
    		VALUES
    		(
				  #{msgType}
				, #{title}
				, #{content}
				, #{regUserSeq}
				, GETDATE()
				, 'Y'
				, 'Y'
				, null
				, null  		
    		)
    		<selectKey resultType="int" keyProperty="msgSeq" order="AFTER">
				SELECT IDENT_CURRENT('TBL_MESSAGE')
 			</selectKey>
    </insert>
    
    <insert id="saveMsgTarget" parameterType="map">
    	INSERT INTO TBL_MESSAGE_TARGET
    			(
    				  MSG_SEQ
    				, USER_SEQ
    				, UNIV_CODE
    				, QUEUE_SEQ
    			)
    		VALUES
    			(
    				  #{msgSeq}
    				, #{userSeq}
    				, #{univCode}
    				, #{seq}
    			)
    </insert>
    
    <update id="updateApplyMsgSeq" parameterType="map">
    	UPDATE TBL_APPLY_EXCHANGE
    	    SET 
    	   		MSG_SEQ = #{msgSeq}
    	  WHERE
    	  		UNIV_CODE = #{univCode}
    	    AND
    	    	SEMESTER_CODE = #{semesterCode}
    	    AND
    	    	YEAR = #{year}
    	    AND 
    	    	USER_SEQ = #{userSeq}
    </update>
    
    <select id="getSubjectInfo" parameterType="map" resultType="umap">
    	<include refid="subjectMapper.getSubjectTimeConcatList" />
    	SELECT DISTINCT 
    		  A.UNIV_CODE
    		, A.YEAR, A.SEMESTER_CODE
    		, A.SUBJECT_NUM
    		, A.SUBJECT_NAME
    		, A.USER_NAME
    		, A.SUBJECT_POINT
    		, ISNULL(A.TEACHER_NAME, '') AS TEACHER_NAME
    		, A.COMPLETE_TYPE
    		, A.USER_DEPARTMENT
    		, STUFF(
				(	
					SELECT 
						', ' + VIEW_B.DAY_OF_WEEK_CONCAT +
						' (' + SUBSTRING(VIEW_A.START_TIME,1,2) + ':' + SUBSTRING(VIEW_A.START_TIME,3,2) +
						'~' + SUBSTRING(VIEW_A.END_TIME,1,2) + ':' + SUBSTRING(VIEW_A.END_TIME,3,2) +
						')'
					FROM SUBJECT_START_END_TIME VIEW_A
					JOIN SUBJECT_DAY_OF_WEEK VIEW_B ON VIEW_A.UNIV_CODE = VIEW_B.UNIV_CODE AND VIEW_A.YEAR = VIEW_B.YEAR AND VIEW_A.SEMESTER_CODE = VIEW_B.SEMESTER_CODE AND VIEW_A.SUBJECT_NUM = VIEW_B.SUBJECT_NUM AND VIEW_A.CLASS_NUM = VIEW_B.CLASS_NUM AND VIEW_A.ORDER_NUM = VIEW_B.ORDER_NUM
					WHERE VIEW_A.UNIV_CODE = A.UNIV_CODE
					AND VIEW_A.YEAR = A.YEAR
					AND VIEW_A.SEMESTER_CODE = A.SEMESTER_CODE
					AND VIEW_A.SUBJECT_NUM = A.SUBJECT_NUM
					AND VIEW_A.CLASS_NUM = A.CLASS_NUM
					FOR XML PATH('')
				)
				,1,2,'') AS SUBJECT_TIME_INFO
		FROM
			TBL_APPLY_EXCHANGE A INNER JOIN TBL_SUBJECT_TIME B 
				ON A.SEMESTER_CODE = B.SEMESTER_CODE 
				AND A.SUBJECT_NUM = B.SUBJECT_NUM
	    WHERE
	   		A.STUDENT_NUMBER = #{studentNumber}
    </select>
    
    
    
</mapper>