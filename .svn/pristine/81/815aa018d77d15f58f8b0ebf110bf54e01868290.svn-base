<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="codeMapper">

	<!-- 모든 코드 목록 조회 -->
	<select id="selectCodeListAll" parameterType="Map" resultType="codeVO">
		SELECT
			  PARENT_CODE
        	, CODE
        	, CODE_NAME
        	, CODE_DESC
        	, CODE_INDEX
        	, USE_YN
        	, DEL_YN
        	, REPLACE(CONVERT(VARCHAR, REG_DT, 120), '-', '.') AS REG_DT
        	, REG_USER_SEQ
        	, REPLACE(CONVERT(VARCHAR, MOD_DT, 120), '-', '.') AS MOD_DT
			, MOD_USER_SEQ
		FROM
			TBL_CODE
		WHERE
			DEL_YN = 'N'
	</select>

    <!-- 하위 코드 목록을 조회 한다. -->
    <select id="selectCodeList" parameterType="Map" resultType="codeVO">
        SELECT
       		  PARENT_CODE
        	, CODE
        	, CODE_NAME
        	, CODE_DESC
        	, CODE_INDEX
        	, USE_YN
        	, DEL_YN
        	, REPLACE(CONVERT(VARCHAR, REG_DT, 120), '-', '.') AS REG_DT
        	, REG_USER_SEQ
        	, REPLACE(CONVERT(VARCHAR, MOD_DT, 120), '-', '.') AS MOD_DT
			, MOD_USER_SEQ
        FROM TBL_CODE
		WHERE DEL_YN = 'N'
		<choose>
			<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(parentCode)">
				AND PARENT_CODE = #{parentCode}
			</when>
			<otherwise>
				AND PARENT_CODE IS NULL
			</otherwise>
		</choose>
        ORDER BY CODE ASC
    </select>

	<!-- 지역과 대학교 목록을 조회 한다. -->
	<select id="getUniversityList" parameterType="Map" resultType="codeVO">
		SELECT *
		FROM (
				 SELECT *
				 FROM TBL_CODE
				 WHERE PARENT_CODE = #{parentCode} AND USE_YN = 'Y' AND DEL_YN = 'N'
				 UNION ALL
				 SELECT B.*
				 FROM TBL_CODE A, TBL_CODE B
				 WHERE A.PARENT_CODE = #{parentCode} AND A.CODE = B.PARENT_CODE AND B.USE_YN = 'Y' AND B.DEL_YN = 'N'
			 ) A
		ORDER BY CODE;
	</select>

	<!-- 코드 정보 조회 -->
	<select id="getCodeInfo" parameterType="Map" resultType="codeVO">
		SELECT
			A.PARENT_CODE
			, (SELECT CODE_NAME FROM TBL_CODE WHERE CODE = A.PARENT_CODE) AS PARENT_CODE_NAME
			, CODE
			, CODE_NAME
			, CODE_DESC
			, CODE_INDEX
			, USE_YN
			, DEL_YN
			, READONLY_YN
			, REPLACE(CONVERT(VARCHAR, A.REG_DT, 120), '-', '.') AS REG_DT
			, A.REG_USER_SEQ
			, (SELECT USER_ID FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_ID
			, (SELECT USER_NAME FROM TBL_USER WHERE USER_SEQ = A.REG_USER_SEQ) AS REG_USER_NAME
			, REPLACE(CONVERT(VARCHAR, A.MOD_DT, 120), '-', '.') AS MOD_DT
			, A.MOD_USER_SEQ
			, (SELECT TOP(1) CODE FROM TBL_CODE WHERE PARENT_CODE = #{code} ORDER BY CODE DESC) AS LOW_LAST_CODE
			<choose>
				<when test="parentCode != null">
				, (SELECT TOP(1) CODE_INDEX FROM TBL_CODE WHERE PARENT_CODE = A.PARENT_CODE ORDER BY CODE DESC) AS INDEX_COUNT
				</when>
				<otherwise>
				, (SELECT TOP(1) CODE_INDEX FROM TBL_CODE WHERE PARENT_CODE IS NULL ORDER BY CODE DESC) AS INDEX_COUNT
				</otherwise>
			</choose>
		FROM TBL_CODE A
		WHERE CODE = #{code}
	</select>
	
	<!-- 코드 정보 수정 -->
	<update id="upsertCodeInfo" parameterType="Map">
		/* codeMapper.upsertCodeInfo */
		
		IF NOT EXISTS (SELECT 1 FROM TBL_CODE WHERE CODE = #{code})
    		INSERT INTO TBL_CODE(
    			PARENT_CODE
    			,CODE
    			,CODE_INDEX
    			,CODE_NAME
    			,CODE_DESC
    			,USE_YN
    			,DEL_YN
    			,READONLY_YN
    			,REG_USER_SEQ
    			,REG_DT
    			,MOD_USER_SEQ
    			,MOD_DT
    		)
    		VALUES(
    			#{parentCode}
    			,#{code}
    			,#{codeIndex}
    			,#{codeName}
    			,#{codeDesc}
    			,#{useYn}
    			,'N'
    			,'N'
    			,#{userSeq}
    			,GETDATE()
    			,#{userSeq}
    			,GETDATE()
    		)
    	ELSE
		UPDATE TBL_CODE
		SET
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(codeName)">
				CODE_NAME = #{codeName},
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(codeDesc)">
				CODE_DESC = #{codeDesc},
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(useYn)">
				USE_YN = #{useYn},
			</if>
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(userSeq)">
				MOD_USER_SEQ = #{userSeq},
			</if>
			MOD_DT = GETDATE()
		WHERE
			CODE = #{code}
	</update>
	
	<!-- 코드이름으로 검색 -->
	<select id="searchCodeName" parameterType="map" resultType="codeVO">
		/* codeMapper.searchCodeName */
		WITH CTE_CODE AS (
			SELECT
				CODE, CODE_NAME, PARENT_CODE
			FROM
				TBL_CODE 
			WHERE
				CODE_NAME LIKE '%'+ #{keywords} + '%'
		UNION ALL
		SELECT
			A.CODE, A.CODE_NAME, A.PARENT_CODE
		FROM
			CTE_CODE AS B
		JOIN
			TBL_CODE AS A 
		ON
			A.CODE= B.PARENT_CODE
		)
		SELECT DISTINCT
			CODE, CODE_NAME, PARENT_CODE
		FROM
			CTE_CODE
	</select>
	
	<!-- 코드 삭제 (숨기기) -->
	<update id="removeCode" parameterType="map">
		/* codeMapper.removeCode */
		UPDATE
			TBL_CODE
		SET
			DEL_YN = 'Y',
			USE_YN= 'N'
		WHERE
			CODE = #{code}
	</update>
	
	<!-- 코드 이름 -->
	<select id="getCodeName" parameterType="string" resultType="string">
		SELECT CODE_NAME FROM TBL_CODE WHERE CODE = #{code}
	</select>
	
	<!-- 코드 순서 변경 -->
	<update id="changeCodeIndex" parameterType="map">
		/* codeMapper.changeCodeIndex */
		UPDATE
			TBL_CODE
        SET
        	CODE_INDEX = CASE
    			WHEN CODE = #{codeA}  THEN (SELECT CODE_INDEX FROM TBL_CODE WHERE CODE = #{codeB})
        		WHEN CODE = #{codeB}  THEN (SELECT CODE_INDEX FROM TBL_CODE WHERE CODE = #{codeA})
        		END
		WHERE
        	CODE IN (#{codeA}, #{codeB })
        AND
        	DEL_YN = 'N'
	</update>
	
	<!-- 최상위 메뉴 인덱스 -->
	<select id="getTopCodeIndex" resultType="Integer">
		SELECT
			TOP(1) CODE_INDEX
		FROM TBL_CODE
		WHERE PARENT_CODE IS NULL ORDER BY CODE_INDEX DESC
	</select>
	
</mapper>